# BespokeSynth Azure Pipelines script

trigger:
  - main

pr:
  - main

jobs:
  - job: Build
    variables:
      isBuild: True
    strategy:
      matrix:
        macOS-x64:
          imageName: 'macos-10.15'
          isMac: True
          cmakeArguments: "-GXcode -D\"CMAKE_OSX_ARCHITECTURES=x86_64\""
        windows-x64:
          imageName: 'windows-2019'
          isWindows: True
          cmakeArguments: "-A x64"
        linux-x64:
          imageName: 'ubuntu-20.04'
          isLinux: True
          cmakeArguments: "-GNinja"

    pool:
      vmImage: $(imageName)

    steps:
      - checkout: self
        fetchDepth: 1
        # submodules: recursive # can't do submodules here b'cuz depth=1 fails with Github

      - bash: |
          echo "BUILD REASON   = " $(Build.Reason)
          echo "cmakeArguments = " $(cmakeArguments)

          if [ $(Build.Reason) == "PullRequest" ]; then
            export CMAKE_CONFIG=Debug
            export CMAKE_TARGET=BespokeSynth
            echo "##vso[task.setvariable variable=CMAKE_CONFIG]Debug"
            echo "##vso[task.setvariable variable=CMAKE_CONFIG;isOutput=true]Debug"
            echo "##vso[task.setvariable variable=CMAKE_TARGET]BespokeSynth"
            echo "##vso[task.setvariable variable=CMAKE_TARGET;isOutput=true]BespokeSynth"
          else
            export CMAKE_CONFIG=Release
            export CMAKE_TARGET=nightly-package
            echo "##vso[task.setvariable variable=CMAKE_CONFIG]Release"
            echo "##vso[task.setvariable variable=CMAKE_CONFIG;isOutput=true]Release"
            echo "##vso[task.setvariable variable=CMAKE_TARGET]nightly-package"
            echo "##vso[task.setvariable variable=CMAKE_TARGET;isOutput=true]nightly-package"
          fi

          echo "cmakeConfig    = " $CMAKE_CONFIG
          echo "cmakeTarget    = " $CMAKE_TARGET
        displayName: all - details on build

      - bash: |
          git submodule update --init --recursive
        displayName: all - submodule init


      - bash: |
          set -e

          sudo apt-get update

          sudo apt-get install -y \
              devscripts \
              libxcb-cursor-dev \
              libxcb-keysyms1-dev \
              libxcb-util-dev \
              libxkbcommon-dev \
              libxkbcommon-x11-dev \
              ninja-build \
              xcb \
              libgtk-3-dev \
              libwebkit2gtk-4.0 \
              libwebkit2gtk-4.0-dev \
              libcurl4-openssl-dev \
              alsa \
              alsa-tools \
              libasound2-dev \
              libjack-dev \
              libfreetype6-dev \
              libxinerama-dev \
              libxcb-xinerama0 \
              libxinerama1 \
              x11proto-xinerama-dev \
              libxrandr-dev \
              libgl1-mesa-dev \
              libxcursor-dev \
              libxcursor1 \
              libxcb-cursor-dev \
              libxcb-cursor0 \
              libusb-1.0.0-dev \
              patchelf

        condition: variables.isLinux
        displayName: linux - run apt-get

      - bash: |
          set -e
          echo Building with BUILD_TYPE = $CMAKE_CONFIG
          cmake -Bbuild $(cmakeArguments) -DCMAKE_BUILD_TYPE=$CMAKE_CONFIG
        displayName: all - configure with cmake

      - bash: |
          set -e
          echo Building with TARGET = $CMAKE_TARGET
          cmake --build build --config $CMAKE_CONFIG --target $CMAKE_TARGET
        displayName: all - build with cmake

      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'INSTALLER_MAC_NIGHTLY'
          targetPath: 'build/nightly'
        condition: and(variables.isMac, ne(variables['Build.Reason'], 'PullRequest'))
        displayName: mac - publish mac artifact

      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'INSTALLER_WIN_NIGHTLY'
          targetPath: 'build/nightly'
        condition: and(variables.isWindows, ne(variables['Build.Reason'], 'PullRequest'))
        displayName: mac - publish win artifact

      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'INSTALLER_LIN_NIGHTLY'
          targetPath: 'build/nightly'
        condition: and(variables.isLinux, ne(variables['Build.Reason'], 'PullRequest'))
        displayName: mac - publish lin artifact
